Internet of Things (IoT) is one of the big buzzwords making the rounds these days.The basic concept is to have lightweight computing platforms integrated with everyday devices turning them into 'smart' devices. For example take your good old electricity meter embed a computing platform on it and connect it to the Internet - you get a Smart Meter!Basic ingredients of an IoT 'device' include:A data source, usually a sensor (e.g. temperature sensor, electricity meter, camera)A lightweight computing platform with:low power requirementsnetwork connectivity (wireless and/or wired)OS to run appsPower connectionData connection (mobile data, ethernet or WiFi)In this post I wanted to build a basic IoT sensor using an off-the-shelf computing platform to show how easy it is!This is also to encourage people to do their own IoT projects!Raspberry Pi and Tessel2 platforms are two obvious choices for the computing platform.I decided to use Tessel2 which is lot less powerful than Pi (sort of like comparing a Ford Focus with a Ferrari F40).Tessel2 has a 580MHz processor, 64MB RAM and 32MB flash (just for comparison Pi3B has a Quad Core 1.2GHz processor, 1GB RAM) - both have Wifi and Ethernet built in.Pi comes with a Debian based OS with full desktop-class capabilities (GUI, Applications etc.) where as Tessel2 just supports Node.JS based apps (it is running Open WRT) and has no GUI capabilities. Therefore it is lot closer to a IoT platform in terms of capabilities, power requirements and form factor.[caption id="attachment_542" align="aligncenter" width="2185"] Temperature Tweeter Architecture[/caption]ArchitectureComputing Platform: Tessel2Tessel2 has a set of basic hardware features which includes USB2.0 ports, sensor sockets (where you can plug in different modules such as temperature, GPS, bluetooth) and one Ethernet socket.Since there is no UI for the Tessel2 OS you have to install the 't2' command line tool to interact with your tessel.The Tessel2 website has an excellent 'first steps' section here.If you are blessed with a Windows 10 based system you might have some issues with detecting the Tessel2. One solution is to install 'generic USB drivers' here. But Google is your friend in case you run into the dreaded: 'Detected a Tessel that is booting' message.Data Source: Climate Sensor ModuleThe sensor module we use as a data source for this example is the climate sensor which gives the ambient temperature and the relative humidity. The sensor module can be purchased separately and you can connect up to two modules at a time.Power and Data:As the sensor is based indoors we use a standard micro-USB power supply. For external use we can use a power bank. The data connection is provided through a wired connection (Ethernet) - again as we are indoors.The Node.JS ApplicationStart by creating a folder for your Tessel2 app and initialise the project by using the 't2 init' command within that folder.Create the node.js app to read data from the sensor and then use the 'twitter' api to create a tweet with the data. The application is really simple but shows off the power of Node.JS and the large ecosystem of libraries available for it.One good thing about the Tessel2 is that because it is such a lightweight platform you really cannot run fulll sized Node.JS apps on it. As a comparison, a single Node.JS instance can use up to 1.8GB of RAM on a 64-bit machine where as Tessel2 has only 64MB RAM in total for everything that is running on it!Most common type of applications that you will find yourself writing, in the IoT space, will involve reading some value from a sensor or attached device then either exposing it via a REST server running on Tessel2 itself (pull) or by calling a remote server to write the data (push).In other words you will just end up writing pipelines to run on Tessel2 which read from a source and write to a destination. You can also provide support for cross cutting concerns such as logging, authentication and remote access.If you want to Tweet the data then you will need to register a Twitter account and create a 'Twitter app' from your account settings. All the keys and secrets are then generated for you. The Twitter API for Node.JS is really easy to use as well. All the info is here.The implementation can be found here: https://twitter.com/machwe_botFew PointersDon't put any complex calculations, data processing or analytics functionality in the pipeline if possible. The idea is also that IoT devices should be deploy and forget.Be careful of the libraries you use. Certain objects such as 'clients' and 'responses' can be quite large considering the fact that you only have less than 64MB of RAM to play around with. So you might want to run the program locally and profile the memory use just to be sure.'t2 run' command allows you to test your program on the tessel2 while getting console output to your terminal. This is an excellent way of testing your programs. Once you are ready to 'deploy and forget' your Tessel2 just use the 't2 push' command to load your Node.JS app on the device. Thereafter every time the device restarts it will launch your app.CodeThis is the code for the 'Climate Tweeter':'npm install' will get you all the imports.[codesyntax lang="javascript"]var Twitter = require('twitter');var tessel = require('tessel');var climatelib = require('climate-si7020');// Init Climate Modulevar climate = climatelib.use(tessel.port['B']);var data = {consumer_key: 'your consumer key',consumer_secret: 'your consumer secret',access_token_key: 'your access token key',access_token_secret: 'your access token secret'};var client = (new Twitter(data));setInterval(function(){if (climate_status) {// Read the Temperature and Humidityclimate.readTemperature('c', function (err, temp) {climate.readHumidity(function (err, humid) {// Output Tweetvar output = (new Date())+',Bristol UK,Home,Temp(C):'+ (temp.toFixed(2)-5) + ', Humidity(%RH):'+ humid.toFixed(2);//Tweet to Twitterclient.post('statuses/update', {status : output}, function(error, tweet, response) {if (error) {												console.error("Error: ",error);}                                                                                                                         });     });});}},600000);climate.on('ready', function () {console.log('Connected to climate module');// Climate module on and working - we can start reading data from itclimate_status = true;});[/codesyntax]What next?The interesting thing is that I did not need anything external to the Tessel2 to make this work. I did not have to setup any servers etc. I can very easily convert the device to work outdoors as well. I could hook up a camera (via USB) to make this a 'live' webcam, attach a GPS and mobile data module with a power pack (for backup) and connect it to your car (via the power port or lighter) - you have a car tracking device.Enjoy! 