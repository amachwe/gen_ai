The iProcess Workspace Browser is a web-based front-end for iProcess. The Workspace Browser is nothing but a web-application which is available in both asp and servlet versions. It does not connect directly to the iProcess engine though. It sends all requests to the iProcess Action Processor which is also a web-application (again available in a servlet and asp version). The Action Processor forwards the request (via TCP/IP) to the iProcess Objects Server which works with the iProcess Engine and processes the request. This arrangement is shown below (with both the Workspace Browser and Action Processor deployed in the same web-server).Now this setup is fine in an ideal scenario but in most organizations web-servers are isolated ('fenced') from the core infrastructure (such as databases and enterprise servers). Usually the access to the core infrastructure is through a single channel (e.g. through a messaging queue server) with direct TCP/IP connections and port 80 requests from outside blocked. In that case you will need to deploy the Action Processor inside the 'fence' with the core infrastructure and setup a proxy system to communicate with the Workspace Browser (which will be sitting outside the 'fence'). The proxy system will transport the HTTP request over the allowed channel (JMS in this example) and return the response. An example is shown below using JMS. To implement the above we need to create the following components:1) Local Proxy - which will be the target for the Workspace Browser instead of the Action Processor which is sitting inside the 'fence' and therefore not accessible over HTTP.2) Proxy for JMS - Proxy which puts the http request in a JMS message and gets the response back to the Local Proxy which returns it to the Workspace Browser.3) JMS Queues - Queues to act like channels through the 'fence'.4) Service for JMS - Service to handle the requests sent over JMS inside the 'fence' and to send the response back over JMS.You might ask why do we need a local proxy and why not call the BW Proxy directly. The reason is very simple. The BW Proxy and Service should be as uncluttered as possible, ideally their only task is to carry the request through the 'fence' and bring out the response. Any processing of the request and response should be done somewhere else (and as we shall see in the example there is a lot of processing required).As we don't want to fiddle with the internals of the iProcess Workspace Browser, we simply add a Local Proxy which does the processing of the request and response. Then we set the Workspace Browser to send all Action Processor requests to the Local Proxy. This means that the Local Proxy will 'behave' exactly like the Action Processor as far as the Workspace Browser is concerned.To put it in one line: using a Local Proxy allows us to separate the 'behavior' of the Action Processor from the task of sending the message through the 'fence'. In the example to follow, we have:1) JSP based Local Proxy (easy to code - no compiling required!).2) BusinessWorks based Proxy for JMS3) TIBCO EMS Server based queues.4) BusinessWorks based Service for JMS In the next part, the example! 